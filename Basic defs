Variables: Variables are locations in memory in which values can be stored.
Each variable has:
                    A name
                    A type
                    A value
Before using a variable, it must be declared.  After declaration, values can be assigned.

Types of Variables in Java

Java has three main kinds of variables:

1. ✅ Local Variables
Declared inside methods or blocks {}.
Used for:
Loop counters
Temporary values
Stored in stack 
Calculations within a method
Scope: Exists only during method/block execution
void greet() {
    String name = "Lavanya";  // Local variable
    System.out.println(name);
}

2. 🧍‍♀️ Instance Variables
Instance variables are object-specific.
Declared inside a class, but outside any method.
Each object gets its own copy.
Represents the state/attributes of an object.
Accessible by multiple methods in the same object.
Stored in heap
Example:
class Student {
    String name;  // Instance variable

    void display() {
        System.out.println(name);
    }
}

3. 🏛 Class Variables (Static)
Declared with the keyword **static** inside a class.
Shared across all objects of that class.
Belongs to the class itself, not instances.
Strored in Method area
Example:
class Student {
    static int count = 0;  // Class variable

    Student() {
        count++;
    }
}


🔑 What Does static Mean in Java?

📌 Definition:
In Java, the static keyword means "belongs to the class, not the object."

So when you declare something as static:

It is shared among all instances of the class.
You do not need to create an object to access it.
📂 Where Can static Be Used?

You can apply static to:

Item	Meaning
static variable	Shared across all objects
static method	Can be called without creating an object
static block	Runs once when class is loaded
static class	A nested class not dependent on outer class object


 1. What is Stack Memory?
Think of it as: short-term, fast-access memory.
Each thread has its own stack 
Stores:
Local variables
Method calls (execution context)
Memory is managed in a LIFO (Last In, First Out) order.
As soon as the method finishes, the variables inside it are automatically removed from memory.
Very fast to access — like a notebook you're writing on right now.
💡 Real-Life Analogy:

Like a stack of plates — when you're done with the top plate (function/method), you remove it. 
It’s temporary.


🔸 2. What is Heap Memory?
Think of it as: long-term memory storage.
Stores:
Objects
Instance variables (inside objects)
Memory is not automatically cleaned when the method finishes — it stays until no references are pointing to it.
Java uses Garbage Collector to clear unused heap memory.
Slightly slower than stack, but used for things that live longer.
💡 Real-Life Analogy:

Like a bookshelf — books (objects) stay there until someone takes them away (GC). 
Even if you're done reading, the book stays unless you throw it away.



